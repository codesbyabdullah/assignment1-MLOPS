import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import joblib

# Load dataset
data = pd.read_csv("D:\\files\\Model_Data.csv")  # Update with actual path

# Handle missing data if necessary
data = data.dropna()  # Example: Drop rows with missing values

# Preprocessing
data = data.drop(columns=['Unnamed: 0', 'City'], errors='ignore')  # Drop unnecessary columns if they exist
X = data.drop(columns=['Price'])  # Features
y = data['Price']  # Target

# Define preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), ['Area', 'No. of Bedrooms']),
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['Location'])
    ])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the Linear Regression model
model = Pipeline(steps=[('preprocessor', preprocessor), ('model', LinearRegression())])

# Train the model
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Linear Regression Model - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

# Save the model
joblib.dump(model, 'model.pkl')
print("Model saved as 'model.pkl'.")
